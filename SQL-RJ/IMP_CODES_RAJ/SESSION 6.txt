use leARn;

CREATE TABLE EMP2
(EID INT ,
NAME VARCHAR(10),
AGE INT);

DROP TABLE EMP2;

CREATE SEQUENCE MYSEQ
AS INT
START WITH 1 
INCREMENT BY 1 
maxvalue 10
MINVALUE 1
CYCLE
CACHE 5;

DROP SEQUENCE MYSEQ;
SELECT NEXT VALUE FOR MYSEQ;

CREATE SEQUENCE MYSEQ
AS INT
START WITH 1
INCREMENT BY 1 ;


INSERT INTO EMP2
VALUES (NEXT VALUE FOR MYSEQ, 'AJAY', 21);

INSERT INTO EMP2
VALUES (NEXT VALUE FOR MYSEQ, 'BABITA', 22);

SELECT * FROM EMP2;
DROP PROCEDURE INEMP2 ;

CREATE PROCEDURE INEMP2 @N VARCHAR(10),@A INT
AS
BEGIN
		INSERT INTO EMP2
		VALUES (NEXT VALUE FOR MYSEQ, @N, @A);

		SELECT * FROM EMP2;

END;

INEMP2 'MONIKA',25;

DELETE EMP2 WHERE EID=7;

CREATE TABLE EMP2
(EID CHAR(5) ,
NAME VARCHAR(10),
AGE INT);

DROP PROCEDURE INEMP2 ;
CREATE PROCEDURE INEMP2 @N VARCHAR(10),@A INT
AS
BEGIN
		DECLARE @ID AS CHAR(5);
		DECLARE @X AS INT;

		SET @X = (NEXT VALUE FOR MYSEQ);

		IF @X <10 
			SET @ID = CONCAT ('E000', @X);
		ELSE IF @X <100 
			SET @ID = CONCAT ('E00', @X);
		ELSE IF @X <1000 
			SET @ID = CONCAT ('E0', @X);
		ELSE IF @X <10000 
			SET @ID = CONCAT ('E', @X);

		INSERT INTO EMP2
		VALUES (@ID, @N, @A);

		SELECT * FROM EMP2;

END;


CREATE FUNCTION GENID (@C AS CHAR(1), @NO AS INT)
RETURNS CHAR(5)
AS
BEGIN
		DECLARE @R AS CHAR(5);

		SELECT @R = CASE	
						WHEN @NO <10 THEN CONCAT (@C, '000', @NO)
						WHEN @NO <100 THEN CONCAT (@C, '00', @NO)
						WHEN @NO <1000 THEN CONCAT (@C, '0', @NO)
						WHEN @NO <10000 THEN CONCAT (@C,  @NO)
		END;
	RETURN @R;
END;


SELECT DBO.GENID('E', 101);



INEMP2 'MOHIT' ,22;


CREATE PROCEDURE INEMP2 @N VARCHAR(10),@A INT
AS
BEGIN
		DECLARE @ID AS CHAR(5);
		DECLARE @X AS INT;

		SET @X = (NEXT VALUE FOR MYSEQ);

		SET @ID = DBO.GENID('E',@X);

		INSERT INTO EMP2
		VALUES (@ID, @N, @A);

		SELECT * FROM EMP2;

END;


-- TRIGGERS -- 

CREATE TABLE PRODUCT
(PID  CHAR(5),
PDESC VARCHAR(20),
PRICE INT);

CREATE TABLE STOCK
(PID CHAR(5),
SQTY INT);

CREATE TABLE ORDERS
(OID CHAR(5),
CID CHAR(5),
PID CHAR(5),
QTY INT);


INSERT INTO PRODUCT VALUES ('P0001', 'DEL KEYBOARD', 500);
INSERT INTO PRODUCT VALUES ('P0002', 'DEL MOUSE', 300);
INSERT INTO PRODUCT VALUES ('P0003', 'LED 15" SCREEN', 3500);
INSERT INTO PRODUCT VALUES ('P0004', '8 GB DDR4 RAM', 2500);
INSERT INTO PRODUCT VALUES ('P0005', 'HP I7 16GB 1 TB', 60500);

INSERT INTO STOCK VALUES ('P0001', 200);
INSERT INTO STOCK VALUES ('P0002', 200);
INSERT INTO STOCK VALUES ('P0003', 100);
INSERT INTO STOCK VALUES ('P0004', 50);
INSERT INTO STOCK VALUES ('P0005', 30);

SELECT * FROM PRODUCT;
SELECT * FROM STOCK;
SELECT * FROM ORDERS;

DELETE ORDERS WHERE OID='O0002';

INSERT INTO ORDERS VALUES ('O0002','C0001','P0002', 10);

INSERT INTO ORDERS VALUES ('O0002','C0001','P0002', 10);

INSERT INTO ORDERS VALUES ('O0003','C0002','P0003', 10);


UPDATE ORDERS SET QTY =  20
WHERE OID= 'O0003'

DROP TRIGGER TR_IN_ORD;

CREATE TRIGGER TR_IN_ORD
ON ORDERS
FOR INSERT
AS
BEGIN
		UPDATE 	STOCK SET SQTY=SQTY-(SELECT QTY FROM INSERTED)
		WHERE PID = (SELECT PID FROM INSERTED);
END;


UPDATE STOCK SET SQTY=SQTY-(10)
		WHERE PID = ('P0001');

DROP TRIGGER TR_PRO_DEL;
CREATE TRIGGER TR_PRO_DEL
ON PRODUCT 
FOR DELETE
AS
BEGIN 
		SET NOCOUNT ON;
		DELETE FROM STOCK 
		WHERE PID= (SELECT PID FROM DELETED);
END;

DELETE PRODUCT WHERE PID = 'P0004';


CREATE TRIGGER TR_UP_ORD
ON ORDERS
FOR UPDATE 
AS
BEGIN
		DECLARE @OQ AS INT;
		DECLARE @NQ AS INT

		SET @OQ= (SELECT QTY FROM DELETED);
		SET @NQ = (SELECT QTY FROM INSERTED);

		UPDATE STOCK SET SQTY=SQTY+@OQ - @NQ
		WHERE PID = (SELECT PID FROM INSERTED);
END;

SELECT * FROM STOCK;
SELECT * FROM ORDERS;
INSERT INTO ORDERS VALUES ('O0004','C0003','P0003', 10);
INSERT INTO ORDERS VALUES ('O0006','C0005','P0003', 50);

INSERT INTO ORDERS VALUES ('O0007','C0006','P0003', 10);

INSERT INTO ORDERS VALUES ('O0008','C0006','P0002', 40);
INSERT INTO ORDERS VALUES ('O0009','C0007','P0003', 5);

UPDATE ORDERS SET QTY = 25 WHERE OID= 'O0009';

UPDATE ORDERS SET QTY = 20 
WHERE OID = 'O0004';

INSERT INTO ORDERS VALUES ('O0005','C0003','P0001', 15);

DROP TRIGGER TR_IN_ORD;

CREATE TRIGGER TR_IN_ORD
ON ORDERS
FOR INSERT
AS
BEGIN	
		SET NOCOUNT ON;
		DECLARE @QR AS INT;
		DECLARE @QS AS INT;
		
		SET @QR= (SELECT QTY FROM INSERTED) ;
		SET @QS = (SELECT SQTY FROM STOCK
					WHERE PID = (SELECT PID FROM INSERTED));
		
		IF @QS>= @QR 
			BEGIN
					UPDATE STOCK SET SQTY=SQTY-@QR
					WHERE PID = (SELECT PID FROM INSERTED);
					PRINT ('ORDER ACCEPTED');
					COMMIT;

			END
		ELSE
			BEGIN
				ROLLBACK;
				PRINT ('Insufficient Quantity');
			END;
END;